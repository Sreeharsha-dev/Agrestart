import React from 'react';
import { Download, RotateCcw } from 'lucide-react';
import { ModelType } from '../types';
import LoadingSpinner from './LoadingSpinner';

interface ResultSectionProps {
  modelType: ModelType;
  result: any;
  selectedFile: File | null;
}

const ResultSection: React.FC<ResultSectionProps> = ({
  modelType,
  result,
  selectedFile,
}) => {
  const handleDownloadReport = () => {
    if (!result) return;

    const reportContent = `
AGRESTART Analysis Report
------------------------
Model Type: ${modelType.toUpperCase()}
Prediction: ${result.prediction}
Confidence: ${(result.confidence * 100).toFixed(1)}%

${result.info.description ? `Description: ${result.info.description}\n` : ''}

${result.info.causes ? `Causes:
${result.info.causes.map((cause: string) => `- ${cause}`).join('\n')}\n` : ''}

${result.info.treatment ? `Treatment:
${result.info.treatment.map((step: string) => `- ${step}`).join('\n')}\n` : ''}

${result.info.control ? `Control Measures:
${result.info.control.map((measure: string) => `- ${measure}`).join('\n')}\n` : ''}

${result.info.management ? `Management:
${result.info.management.map((tip: string) => `- ${tip}`).join('\n')}\n` : ''}

${result.info.suitable_crops ? `Suitable Crops:
${result.info.suitable_crops.map((crop: string) => `- ${crop}`).join('\n')}\n` : ''}

Generated by AGRESTART
Date: ${new Date().toLocaleString()}
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `AGRESTART_${modelType}_report_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow-lg">
      <h3 className="text-xl font-semibold mb-4">Analysis Results</h3>
      
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="aspect-video bg-gray-100 rounded-lg overflow-hidden">
          {selectedFile && (
            <img
              src={URL.createObjectURL(selectedFile)}
              alt="Original"
              className="w-full h-full object-cover"
            />
          )}
        </div>
        <div className="aspect-video bg-gray-100 rounded-lg overflow-hidden">
          {result && result.bbox ? (
            <div className="relative w-full h-full">
              {selectedFile && (
                <img
                  src={URL.createObjectURL(selectedFile)}
                  alt="Predicted"
                  className="w-full h-full object-cover"
                />
              )}
              <div
                className="absolute border-2 border-[#88D66C]"
                style={{
                  left: `${(result.bbox[0] / selectedFile?.width || 0) * 100}%`,
                  top: `${(result.bbox[1] / selectedFile?.height || 0) * 100}%`,
                  width: `${((result.bbox[2] - result.bbox[0]) / selectedFile?.width || 0) * 100}%`,
                  height: `${((result.bbox[3] - result.bbox[1]) / selectedFile?.height || 0) * 100}%`,
                }}
              />
            </div>
          ) : (
            <div className="w-full h-full flex items-center justify-center text-gray-500">
              {result?.error || 'Predicted Result'}
            </div>
          )}
        </div>
      </div>

      <div className="bg-gray-50 rounded-lg p-4 mb-4">
        <h4 className="font-semibold mb-2">Report</h4>
        {result ? (
          <div className="space-y-4">
            <div>
              <p className="text-gray-700 mb-2">
                Prediction: <span className="font-semibold">{result.prediction}</span>
                <span className="ml-2 text-sm text-gray-500">
                  ({(result.confidence * 100).toFixed(1)}% confidence)
                </span>
              </p>
              {result.info.description && (
                <p className="text-gray-600">{result.info.description}</p>
              )}
            </div>

            {result.info.causes && (
              <div>
                <h5 className="font-medium mb-2">Causes:</h5>
                <ul className="list-disc list-inside text-gray-700">
                  {result.info.causes.map((cause: string, index: number) => (
                    <li key={index}>{cause}</li>
                  ))}
                </ul>
              </div>
            )}

            {result.info.treatment && (
              <div>
                <h5 className="font-medium mb-2">Treatment:</h5>
                <ul className="list-disc list-inside text-gray-700">
                  {result.info.treatment.map((step: string, index: number) => (
                    <li key={index}>{step}</li>
                  ))}
                </ul>
              </div>
            )}

            {result.info.control && (
              <div>
                <h5 className="font-medium mb-2">Control Measures:</h5>
                <ul className="list-disc list-inside text-gray-700">
                  {result.info.control.map((measure: string, index: number) => (
                    <li key={index}>{measure}</li>
                  ))}
                </ul>
              </div>
            )}

            {result.info.management && (
              <div>
                <h5 className="font-medium mb-2">Management:</h5>
                <ul className="list-disc list-inside text-gray-700">
                  {result.info.management.map((tip: string, index: number) => (
                    <li key={index}>{tip}</li>
                  ))}
                </ul>
              </div>
            )}

            {result.info.suitable_crops && (
              <div>
                <h5 className="font-medium mb-2">Suitable Crops:</h5>
                <ul className="list-disc list-inside text-gray-700">
                  {result.info.suitable_crops.map((crop: string, index: number) => (
                    <li key={index}>{crop}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ) : (
          <p className="text-gray-500">Upload an image to see the analysis results</p>
        )}
      </div>

      <div className="flex space-x-4">
        <button
          onClick={handleDownloadReport}
          disabled={!result}
          className="flex items-center space-x-2 px-4 py-2 bg-[#88D66C] text-white rounded-lg hover:bg-[#73BBA3] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <Download className="w-5 h-5" />
          <span>Download Report</span>
        </button>
        <button
          onClick={() => window.location.reload()}
          className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
        >
          <RotateCcw className="w-5 h-5" />
          <span>Upload Again</span>
        </button>
      </div>
    </div>
  );
};

export default ResultSection;